generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                       String                  @id @default(uuid())
  email                    String                  @unique
  full_name                String?
  avatar_url               String?
  preferred_language       String                  @default("en")
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  last_login               DateTime?
  is_active                Boolean                 @default(true)
  timezone                 String?
  date_of_birth            DateTime?
  location                 String?
  learning_preferences     Json?
  email_verified           DateTime?
  password_hash            String?
  reset_token              String?
  reset_token_expiry       DateTime?
  leaderboards             Leaderboard[]
  quiz_attempts            QuizAttempt[]
  quiz_questions           QuizQuestion[]
  user_achievements        UserAchievement[]
  user_progress            UserProgress[]
  user_sessions            UserSession[]
  cultural_images          CulturalImage[]
  cultural_image_downloads CulturalImageDownload[]

  @@map("profiles")
}

model Category {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  slug           String         @unique
  icon           String?
  color          String?
  sort_order     Int            @default(0)
  is_active      Boolean        @default(true)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  leaderboards   Leaderboard[]
  quiz_questions QuizQuestion[]
  user_progress  UserProgress[]

  @@map("categories")
}

model QuizQuestion {
  id               String          @id @default(uuid())
  category_id      String
  question_text    String
  question_type    QuestionType
  difficulty_level DifficultyLevel @default(beginner)
  points           Int             @default(10)
  explanation      String?
  image_url        String?
  audio_url        String?
  metadata         Json?
  is_active        Boolean         @default(true)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  created_by       String
  quiz_answers     QuizAnswer[]
  quiz_attempts    QuizAttempt[]
  category         Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  creator          Profile         @relation(fields: [created_by], references: [id])

  @@map("quiz_questions")
}

model QuizAnswer {
  id          String       @id @default(uuid())
  question_id String
  answer_text String
  is_correct  Boolean      @default(false)
  explanation String?
  sort_order  Int          @default(0)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  question    QuizQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

model UserProgress {
  id                        String   @id @default(uuid())
  user_id                   String
  category_id               String
  total_questions_attempted Int      @default(0)
  correct_answers           Int      @default(0)
  total_points_earned       Int      @default(0)
  current_streak            Int      @default(0)
  longest_streak            Int      @default(0)
  last_activity             DateTime @default(now())
  completion_percentage     Float    @default(0)
  average_score             Float    @default(0)
  time_spent_minutes        Int      @default(0)
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  category                  Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user                      Profile  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, category_id])
  @@map("user_progress")
}

model QuizAttempt {
  id                 String       @id @default(uuid())
  user_id            String
  question_id        String
  selected_answer_id String?
  user_answer_text   String?
  is_correct         Boolean
  points_earned      Int          @default(0)
  time_taken_seconds Int          @default(0)
  attempt_number     Int          @default(1)
  created_at         DateTime     @default(now())
  question           QuizQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user               Profile      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Achievement {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String
  icon              String?
  badge_color       String?
  criteria          Json
  points_reward     Int               @default(0)
  is_active         Boolean           @default(true)
  rarity            AchievementRarity @default(common)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  user_achievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id             String      @id @default(uuid())
  user_id        String
  achievement_id String
  earned_at      DateTime    @default(now())
  progress_data  Json?
  achievement    Achievement @relation(fields: [achievement_id], references: [id], onDelete: Cascade)
  user           Profile     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, achievement_id])
  @@map("user_achievements")
}

model Leaderboard {
  id            String     @id @default(uuid())
  user_id       String
  category_id   String?
  period_type   PeriodType
  period_start  DateTime
  period_end    DateTime?
  total_points  Int        @default(0)
  rank_position Int        @default(0)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  category      Category?  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user          Profile    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("leaderboards")
}

model UserSession {
  id                  String    @id @default(uuid())
  user_id             String
  session_start       DateTime
  session_end         DateTime?
  duration_minutes    Int?
  pages_visited       Int       @default(0)
  questions_attempted Int       @default(0)
  device_type         String?
  browser             String?
  ip_address          String?
  created_at          DateTime  @default(now())
  user                Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum QuestionType {
  multiple_choice
  true_false
  fill_blank
  matching

  @@map("question_type")
}

enum DifficultyLevel {
  beginner
  intermediate
  advanced

  @@map("difficulty_level")
}

enum AchievementRarity {
  common
  rare
  epic
  legendary

  @@map("achievement_rarity")
}

enum PeriodType {
  daily
  weekly
  monthly
  all_time

  @@map("period_type")
}

// Cultural Content Management Models
model CulturalImage {
  id             String                  @id @default(uuid())
  title          String
  description    String?
  region         String?
  photographer   String?
  uploaded_by    String
  file_path      String
  file_size      Int
  mime_type      String
  width          Int?
  height         Int?
  content_type   ContentType             @default(image)
  date_taken     DateTime?
  date_uploaded  DateTime                @default(now())
  updated_at     DateTime                @updatedAt
  view_count     Int                     @default(0)
  download_count Int                     @default(0)
  metadata       Json?
  uploader       Profile                 @relation(fields: [uploaded_by], references: [id], onDelete: Cascade)
  downloads      CulturalImageDownload[]

  @@index([uploaded_by])
  @@index([date_uploaded])
  @@index([region])
  @@index([content_type])
  @@map("cultural_images")
}

// Track image/video downloads for analytics
model CulturalImageDownload {
  id          String        @id @default(uuid())
  image_id    String
  user_id     String?
  ip_address  String?
  user_agent  String?
  download_at DateTime      @default(now())
  file_format String?
  file_size   Int?
  image       CulturalImage @relation(fields: [image_id], references: [id], onDelete: Cascade)
  user        Profile?      @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([image_id])
  @@index([user_id])
  @@index([download_at])
  @@map("cultural_image_downloads")
}

enum ContentType {
  image
  video

  @@map("content_type")
}
